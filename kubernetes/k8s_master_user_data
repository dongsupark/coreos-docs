#cloud-config
ssh_authorized_keys:
 - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKKSJgr4IAmPBOjA/czvDUXySp7hL92DyRyj3jbLjk+dHilsqKL1qtseRtL02tbb6Yi+uWVaDFkdJAwJSTlJo8p9stPirJVtNsiK6hWw6i/2FYllp8AjVEtolO0g9J7Ie9e0aYUbcjK9q7OTnapAWzmkRwB0zUOo2zPI15LdOHHe4cM12zGibHfiJ5+BUuyrepZwY66ChHjrltvzZHbEbdlpZddgmLiQFyXbXJQaDkvsqw433ruM4MSVYVvCoAl42TiukbzLQH/gQ6oX9rHry9EWggHSi5AAc4RVCpc0vGjNV4rtTZy721+wVYsdtVdskFtMxXxVrYPoO4AH3xBIvb anton@laptop
write-files:
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /etc/kubernetes/skydns-rc.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: ReplicationController
      metadata:
        name: kube-dns-v8
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          version: v8
          kubernetes.io/cluster-service: "true"
      spec:
        replicas: 1
        selector:
          k8s-app: kube-dns
          version: v8
        template:
          metadata:
            labels:
              k8s-app: kube-dns
              version: v8
              kubernetes.io/cluster-service: "true"
          spec:
            containers:
            - name: kube2sky
              image: gcr.io/google_containers/kube2sky:1.11
              resources:
                limits:
                  cpu: 100m
                  memory: 50Mi
              args:
              # command = "/kube2sky"
              - -domain=%K8S_DOMAIN%
              - -etcd-server=http://%HOSTNAME%:2379
              - -kube_master_url=http://%HOSTNAME%:8080
            - name: skydns
              image: gcr.io/google_containers/skydns:2015-03-11-001
              resources:
                limits:
                  cpu: 100m
                  memory: 50Mi
              args:
              # command = "/skydns"
              - -machines=http://%HOSTNAME%:2379
              - -addr=0.0.0.0:53
              - -domain=%K8S_DOMAIN%.
              ports:
              - containerPort: 53
                name: dns
                protocol: UDP
              - containerPort: 53
                name: dns-tcp
                protocol: TCP
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
            - name: healthz
              image: gcr.io/google_containers/exechealthz:1.0
              resources:
                limits:
                  cpu: 10m
                  memory: 20Mi
              args:
              - -cmd=nslookup kubernetes.default.svc.skydns.local localhost >/dev/null
              - -port=8080
              ports:
              - containerPort: 8080
                protocol: TCP
            dnsPolicy: Default  # Don't use cluster DNS.
  - path: /etc/kubernetes/skydns-service.yaml
    permissions: '0644'
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: kube-dns
        namespace: kube-system
        labels:
          k8s-app: kube-dns
          kubernetes.io/cluster-service: "true"
          kubernetes.io/name: "KubeDNS"
      spec:
        selector:
          k8s-app: kube-dns
        clusterIP: %K8S_DNS%
        ports:
        - name: dns
          port: 53
          protocol: UDP
        - name: dns-tcp
          port: 53
          protocol: TCP
hostname: %HOSTNAME%
coreos:
  etcd2:
    name: master
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://%H:2379,http://%H:4001
    initial-cluster-token: k8s_etcd
    listen-peer-urls: http://%H:2380,http://%H:7001
    initial-advertise-peer-urls: http://%H:2380
    initial-cluster: master=http://%H:2380
    initial-cluster-state: new
  fleet:
    metadata: "role=master"
  units:
    - name: systemd-networkd.service
      command: restart
    - name: fleet.service
      command: start
    - name: docker.service
      drop-ins:
        - name: 99-silent.conf
          content: |
            [Service]
            # suppress docker verbosity on worker nodes
            Environment=DOCKER_OPTS=--log-level=error
    - name: flanneld.service
      command: stop
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "%FLANNEL_TYPE%"}}'
    - name: generate-serviceaccount-key.service
      command: start
      content: |
        [Unit]
        Description=Generate service-account key file
        ConditionPathExists=!/opt/bin/kube-serviceaccount.key
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStart=/bin/openssl genrsa -out /opt/bin/kube-serviceaccount.key 2048 2>/dev/null
        RemainAfterExit=yes
        Type=oneshot
    - name: download-kubectl.service
      command: start
      content: |
        [Unit]
        Description=Download kubectl binary
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStart=/usr/bin/curl -s -L -o /opt/bin/kubectl -z /opt/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/%K8S_RELEASE%/bin/linux/amd64/kubectl
        ExecStartPost=/usr/bin/chmod +x /opt/bin/kubectl
        RemainAfterExit=yes
        Type=oneshot
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        # workaround to wait until flanneld.service service is up
        #ExecStartPre=/usr/bin/bash -c "while true; do systemctl is-active flanneld.service > /dev/null && exit 0; sleep 1; done"
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -s -L -o /opt/bin/setup-network-environment -z /opt/bin/setup-network-environment https://github.com/kelseyhightower/setup-network-environment/releases/download/1.0.1/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service etcd2.service generate-serviceaccount-key.service
        After=setup-network-environment.service etcd2.service generate-serviceaccount-key.service
        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -s -L -o /opt/bin/kube-apiserver -z /opt/bin/kube-apiserver https://storage.googleapis.com/kubernetes-release/release/%K8S_RELEASE%/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStartPre=/opt/bin/wupiao 127.0.0.1:2379/v2/machines
        ExecStart=/opt/bin/kube-apiserver \
        --service_account_key_file=/opt/bin/kube-serviceaccount.key \
        --service_account_lookup=false \
        --admission_control=NamespaceLifecycle,NamespaceAutoProvision,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
        --runtime_config=api/v1 \
        --allow_privileged=true \
        --insecure_bind_address=0.0.0.0 \
        --insecure_port=8080 \
        --kubelet_https=true \
        --secure_port=6443 \
        --service-cluster-ip-range=10.100.0.0/16 \
        --etcd_servers=http://127.0.0.1:2379 \
        --public_address_override=${DEFAULT_IPV4} \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/curl -s -L -o /opt/bin/kube-controller-manager -z /opt/bin/kube-controller-manager https://storage.googleapis.com/kubernetes-release/release/%K8S_RELEASE%/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --service_account_private_key_file=/opt/bin/kube-serviceaccount.key \
        --root-ca-file=/var/run/kubernetes/apiserver.crt \
        --master=127.0.0.1:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/curl -s -L -o /opt/bin/kube-scheduler -z /opt/bin/kube-scheduler https://storage.googleapis.com/kubernetes-release/release/%K8S_RELEASE%/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
        Restart=always
        RestartSec=10
    - name: skydns.service
      command: start
      content: |
        [Unit]
        Description=SkyDNS for Kubernetes cluster
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        ConditionPathExists=!/etc/kubernetes/skydns.installed
        Requires=kube-scheduler.service
        After=kube-scheduler.service
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/kubectl create -f /etc/kubernetes/skydns-rc.yaml
        ExecStart=/opt/bin/kubectl create -f /etc/kubernetes/skydns-service.yaml
        ExecStart=/usr/bin/touch /etc/kubernetes/skydns.installed
        RemainAfterExit=yes
    - name: download_yaml.service
      command: start
      content: |
        [Unit]
        Description=Download YAML file for Kubernetes cluster demo
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        ConditionPathExists=!/home/core/kubectl_demo
        Requires=setup-network-environment.service
        After=setup-network-environment.service
        [Service]
        Type=oneshot
        User=core
        ExecStart=/usr/bin/mkdir -p /home/core/kubectl_demo
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/redis-master-controller.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/redis-master-controller.yaml
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/redis-master-service.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/redis-master-service.yaml
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/redis-slave-controller.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/redis-slave-controller.yaml
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/redis-slave-service.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/redis-slave-service.yaml
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/frontend-controller.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/frontend-controller.yaml
        ExecStart=/usr/bin/curl -so /home/core/kubectl_demo/frontend-service.yaml https://raw.githubusercontent.com/GoogleCloudPlatform/kubernetes/%K8S_RELEASE%/examples/guestbook/frontend-service.yaml
        RemainAfterExit=yes
  update:
    reboot-strategy: off
